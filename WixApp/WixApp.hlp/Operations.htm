<!doctype html>
<html><!-- InstanceBegin template="/Templates/OneColumnPage.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Operations</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
<link href="App.css" rel="stylesheet" type="text/css">
</head>

<body>

<div class="container">
<div class="content">
<!-- InstanceBeginEditable name="Title" -->
<h1>WixApp Operations</h1>
<!-- InstanceEndEditable -->

<!-- InstanceBeginEditable name="Body" -->
<h2>ToolBar Examples</h2>
<p>
  The toolbar in a dialog box is not directly supported by MFC.  The library has a little expansion of
  the MFC toolbar.  The creation of a toolbar and the following example controls is a two step process.
  The first step is in the OnInitDialog of the dialog box:
</p>
<blockquote>
  if (!toolBar.create(this, IDR_TOOLBAR)) return false;
</blockquote>
<p>
  When the toolbar is created there is a Registered Message sent to set up the controls on the toolbar:
</p>
<blockquote>
ON_REGISTERED_MESSAGE(AFX_WM_RESETTOOLBAR, &OnResetToolBar)
</blockquote>
<p>
Here is the setup for all the controls on the toolbar:
</p>
<blockquote>
LRESULT DialogDlg::OnResetToolBar(WPARAM wParam, LPARAM lParam) {setupToolBar();  return 0;}<br>
<br>
<br>
void DialogDlg::setupToolBar() {<br>
CRect winRect;   GetWindowRect(&winRect);   toolBar.initialize(winRect);<br>
<br>
&nbsp;&nbsp;toolBar.installBtn(ID_Button, _T(" My Button "));<br>
<br>
&nbsp;&nbsp;if (toolBar.installComboBox(ID_CBox)) setComboBox();<br>
<br>
&nbsp;toolBar.installEditBox(ID_EditBox, 20);<br>
<br>
&nbsp;&nbsp;(toolBar.installPopupMenu(ID_PopupMenu)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;toolBar.addPopupMenu(   ID_PopupMenu, IDR_PopupMenu);<br>
&nbsp;&nbsp;&nbsp;&nbsp;toolBar.setPopupCaption(ID_PopupMenu, MenuCaption);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;if (toolBar.installPopupMenu(ID_PopupMenu1)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;toolBar.addPopupItems(  ID_PopupMenu1, PopupItems, noElements(PopupItems));<br>
&nbsp;&nbsp;&nbsp;&nbsp;toolBar.setPopupCaption(ID_PopupMenu1, ItemsCaption);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;}<br>
</blockquote>

<h3><img src="Images/MyButton.jpg" width="37" height="15"> A Button</h3>
<p>
This is a long button (dd,15) with a caption.  A flying tooltip is possible for a button
</p>

<h3><img src="Images/Greeks.jpg"> Combo Box</h3>
<p>
  A Combo Box in this implementation contains a string and an integer on each line.  The combo box
  is loaded by the program, either all at once or one item at a time.  It turns out that a MENU entity in
  the resource file also contains a string and an integer.  So a combo box may be loaded from a MENU
  in the resource file by knowing the MENU identifier.
</p>
<p>
  The struct (i.e. a public class) CbxItem is used to define a a single item that may be loaded into
  the Combo Box.  The usual technique is to create an constant (perhaps static) vector of CbxItems and
  there is a function to load that directly into the Combo Box.
</p>
<p>
  When the user selects an item in the combo box the ON_CBN_SELCHANGE message is sent to the application.
  The following entry in the BEGIN_MESSAGE_MAP will cause the onComboBoxChng function to be executed:
</p>
<blockquote>
ON_CBN_SELCHANGE(ID_CBox, &onComboBoxChng) // Process secelection from the combo box list
</blockquote>
<p>
The following function will retrieve the string and data:
</p>
<blockquote>
String s;<br>
int&nbsp;&nbsp;&nbsp;&nbsp;    x;<br>
<br>
  &nbsp;&nbsp;if (!toolBar.getCbxSel(ID_CBox, s, x)) return; </blockquote>

<h3><img src="Images/EditBoox.jpg"> Edit Box</h3>
<p>
  The edit box allows the user to type some text.  When the user leaves the edit box the kill focus
  command message will allow the text to be processed:
</p>
<blockquote>
ON_EN_KILLFOCUS(ID_EditBox, &onTBEditBox) // Process content of edit box
</blockquote>
<p>
At the function the following function call will retrieve the text:
</p>
<blockquote>
String s;<br>
  &nbsp;&nbsp;toolBar.getEbxText(ID_EditBox, s);
</blockquote>

<h3><img src="Images/PopupMenu.jpg" width="51" height="15"> Drop Down Resource Menu </h3>
<p>
A drop down menu uses a combo box control.  This version loads the menu from the application's resources.
Then instead of reacting to the select change message by retrieving the item from the combo box a
command message is sent with the item's integer data, i.e. the command ID.  Both the select change and
the command message entries must appear in the Message Map:
</p>
<blockquote>
ON_CBN_SELCHANGE(ID_PopupMenu,   &onDispatch)           // Send Command Message with ID_...<br>
ON_COMMAND(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID_Option01,&nbsp;&nbsp;&nbsp;&nbsp; &onOption01)<br>
ON_COMMAND(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID_Option02,&nbsp;&nbsp;&nbsp;&nbsp; &onOption02)<br>
</blockquote>
<p>
Here is the code for onDispatch:
</p>
<blockquote>
void DialogDlg::onDispatch()  {toolBar.dispatch(ID_PopupMenu,  MenuCaption);}
</blockquote>
<p>
  A Menu does not need the item selected to appear in the edit box associated with the combo box but it
  is useful for the caption of the menu to appear there.  So, right after the dispatch of the command
  the caption is restored to the drop down menu.
</p>

<h3><img src="Images/ItemsMenu.jpg" width="51" height="15"> Programmable Drop Down Menu</h3>
<p>
The initialization of the menu is the only difference between this drop down menu and the previous drop down menu.
</p>

<h3><img src="Images/About.jpg" width="16" height="15"> About</h3>
<p>
Displays the About Box.  The about box uses text from the resource file (TestApp.rc) for
the output information.  There is a standard about box dialog in the Library.
</p>
<h3><img src="Images/Exit.jpg" width="16" height="15"> Exit</h3>
<p>
Exit the application with no reservations.
</p>
<h2>File Menu</h2>
<h3>Change Ready</h3>
<p>
Executes a command which outputs changes the "Ready" State and displays the result in the Status Bar.
</p>
<!-- InstanceEndEditable -->
</div><!-- end .content -->
</div><!-- end .container -->
</body>
<!-- InstanceEnd --></html>
