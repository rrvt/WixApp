// Created by Microsoft (R) C/C++ Compiler Version 14.16.27045.0 (a6f52b41).
//
// d:\sources\codegenii\debug\library\acedao.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files (x86)\Microsoft Office\root\Office16\ACEDAO.DLL
// compiler-generated file created 04/02/21 at 18:09:30 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace DAO {

//
// Forward references and typedefs
//

struct __declspec(uuid("4ac9e1da-5bad-4ac7-86e3-24f4cdceca28"))
/* LIBID */ __DAO;
enum RecordsetTypeEnum;
enum EditModeEnum;
enum RecordsetOptionEnum;
enum LockTypeEnum;
enum UpdateCriteriaEnum;
enum FieldAttributeEnum;
enum DataTypeEnum;
enum RelationAttributeEnum;
enum TableDefAttributeEnum;
enum QueryDefTypeEnum;
enum QueryDefStateEnum;
enum DatabaseTypeEnum;
enum CollatingOrderEnum;
enum IdleEnum;
enum PermissionEnum;
enum SynchronizeTypeEnum;
enum ReplicaTypeEnum;
enum WorkspaceTypeEnum;
enum CursorDriverEnum;
enum DriverPromptEnum;
enum SetOptionEnum;
enum ParameterDirectionEnum;
enum UpdateTypeEnum;
enum RecordStatusEnum;
enum CommitTransOptionsEnum;
enum _DAOSuppHelp;
struct __declspec(uuid("0000000a-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _DAO;
struct __declspec(uuid("00000029-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Properties;
struct __declspec(uuid("000000a2-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _DynaCollection;
struct __declspec(uuid("000000a0-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _Collection;
struct __declspec(uuid("00000027-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Property;
struct __declspec(uuid("00000021-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _DBEngine;
struct __declspec(uuid("0000003b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Workspaces;
struct __declspec(uuid("00000039-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Workspace;
struct __declspec(uuid("00000073-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Databases;
struct __declspec(uuid("00000071-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Database;
struct __declspec(uuid("0000004b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ TableDefs;
struct /* coclass */ TableDef;
struct __declspec(uuid("00000049-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _TableDef;
struct __declspec(uuid("00000053-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Fields;
struct /* coclass */ Field;
struct __declspec(uuid("00000051-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _Field;
struct __declspec(uuid("0000005b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Indexes;
struct /* coclass */ Index;
struct __declspec(uuid("00000059-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _Index;
struct __declspec(uuid("00000031-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Recordset;
struct /* coclass */ QueryDef;
struct __declspec(uuid("00000079-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _QueryDef;
struct __declspec(uuid("00000083-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Parameters;
struct __declspec(uuid("00000081-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Parameter;
struct __declspec(uuid("00000041-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Connection;
struct __declspec(uuid("0000007b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ QueryDefs;
struct __declspec(uuid("00000033-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Recordsets;
struct __declspec(uuid("0000008b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Relations;
struct /* coclass */ Relation;
struct __declspec(uuid("00000089-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _Relation;
struct __declspec(uuid("00000093-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Containers;
struct __declspec(uuid("00000091-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Container;
struct __declspec(uuid("0000009b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Documents;
struct __declspec(uuid("00000099-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Document;
struct __declspec(uuid("0000006b-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Users;
struct /* coclass */ User;
struct __declspec(uuid("00000069-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _User;
struct __declspec(uuid("00000063-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Groups;
struct /* coclass */ Group;
struct __declspec(uuid("00000061-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ _Group;
struct __declspec(uuid("00000043-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Connections;
struct __declspec(uuid("00000025-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Errors;
struct __declspec(uuid("00000023-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Error;
struct __declspec(uuid("0000009d-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ ComplexType;
struct /* coclass */ DBEngine;
struct /* coclass */ PrivDBEngine;
struct __declspec(uuid("0000005d-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ IndexFields;
struct __declspec(uuid("00000035-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Recordset2;
struct __declspec(uuid("00000054-0000-0010-8000-00aa006d2ea4"))
/* dual interface */ Field2;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_Collection, __uuidof(_Collection));
_COM_SMARTPTR_TYPEDEF(_DynaCollection, __uuidof(_DynaCollection));
_COM_SMARTPTR_TYPEDEF(TableDefs, __uuidof(TableDefs));
_COM_SMARTPTR_TYPEDEF(Fields, __uuidof(Fields));
_COM_SMARTPTR_TYPEDEF(Indexes, __uuidof(Indexes));
_COM_SMARTPTR_TYPEDEF(QueryDefs, __uuidof(QueryDefs));
_COM_SMARTPTR_TYPEDEF(Relations, __uuidof(Relations));
_COM_SMARTPTR_TYPEDEF(Users, __uuidof(Users));
_COM_SMARTPTR_TYPEDEF(Groups, __uuidof(Groups));
_COM_SMARTPTR_TYPEDEF(Error, __uuidof(Error));
_COM_SMARTPTR_TYPEDEF(Errors, __uuidof(Errors));
_COM_SMARTPTR_TYPEDEF(ComplexType, __uuidof(ComplexType));
_COM_SMARTPTR_TYPEDEF(IndexFields, __uuidof(IndexFields));
_COM_SMARTPTR_TYPEDEF(_DAO, __uuidof(_DAO));
_COM_SMARTPTR_TYPEDEF(Property, __uuidof(Property));
_COM_SMARTPTR_TYPEDEF(Properties, __uuidof(Properties));
_COM_SMARTPTR_TYPEDEF(_Field, __uuidof(_Field));
_COM_SMARTPTR_TYPEDEF(_Index, __uuidof(_Index));
_COM_SMARTPTR_TYPEDEF(Parameter, __uuidof(Parameter));
_COM_SMARTPTR_TYPEDEF(Parameters, __uuidof(Parameters));
_COM_SMARTPTR_TYPEDEF(_Relation, __uuidof(_Relation));
_COM_SMARTPTR_TYPEDEF(Document, __uuidof(Document));
_COM_SMARTPTR_TYPEDEF(Documents, __uuidof(Documents));
_COM_SMARTPTR_TYPEDEF(Container, __uuidof(Container));
_COM_SMARTPTR_TYPEDEF(Containers, __uuidof(Containers));
_COM_SMARTPTR_TYPEDEF(_User, __uuidof(_User));
_COM_SMARTPTR_TYPEDEF(_Group, __uuidof(_Group));
_COM_SMARTPTR_TYPEDEF(Field2, __uuidof(Field2));
_COM_SMARTPTR_TYPEDEF(_DBEngine, __uuidof(_DBEngine));
_COM_SMARTPTR_TYPEDEF(Workspaces, __uuidof(Workspaces));
_COM_SMARTPTR_TYPEDEF(Workspace, __uuidof(Workspace));
_COM_SMARTPTR_TYPEDEF(Databases, __uuidof(Databases));
_COM_SMARTPTR_TYPEDEF(Database, __uuidof(Database));
_COM_SMARTPTR_TYPEDEF(_TableDef, __uuidof(_TableDef));
_COM_SMARTPTR_TYPEDEF(Recordset, __uuidof(Recordset));
_COM_SMARTPTR_TYPEDEF(_QueryDef, __uuidof(_QueryDef));
_COM_SMARTPTR_TYPEDEF(Recordsets, __uuidof(Recordsets));
_COM_SMARTPTR_TYPEDEF(Connection, __uuidof(Connection));
_COM_SMARTPTR_TYPEDEF(Connections, __uuidof(Connections));
_COM_SMARTPTR_TYPEDEF(Recordset2, __uuidof(Recordset2));

//
// Type library items
//

enum __declspec(uuid("b6ce0046-20c3-340f-985c-3559e85dc5e1"))
RecordsetTypeEnum
{
    dbOpenTable = 1,
    dbOpenDynaset = 2,
    dbOpenSnapshot = 4,
    dbOpenForwardOnly = 8,
    dbOpenDynamic = 16
};

enum __declspec(uuid("5ebef31f-3496-3c51-9e36-c66df55584d7"))
EditModeEnum
{
    dbEditNone = 0,
    dbEditInProgress = 1,
    dbEditAdd = 2
};

enum __declspec(uuid("86dbaf96-c3be-3773-a5e6-97eb2f1749f4"))
RecordsetOptionEnum
{
    dbDenyWrite = 1,
    dbDenyRead = 2,
    dbReadOnly = 4,
    dbAppendOnly = 8,
    dbInconsistent = 16,
    dbConsistent = 32,
    dbSQLPassThrough = 64,
    dbFailOnError = 128,
    dbForwardOnly = 256,
    dbSeeChanges = 512,
    dbRunAsync = 1024,
    dbExecDirect = 2048
};

enum __declspec(uuid("d5662dfd-b471-3e11-865d-f0177e687e3d"))
LockTypeEnum
{
    dbPessimistic = 2,
    dbOptimistic = 3,
    dbOptimisticValue = 1,
    dbOptimisticBatch = 5
};

enum __declspec(uuid("76903150-be34-3fc0-a76f-5d6eea439388"))
UpdateCriteriaEnum
{
    dbCriteriaKey = 1,
    dbCriteriaModValues = 2,
    dbCriteriaAllCols = 4,
    dbCriteriaTimestamp = 8,
    dbCriteriaDeleteInsert = 16,
    dbCriteriaUpdate = 32
};

enum __declspec(uuid("0699599d-a8a7-32ec-9b88-690482209ba5"))
FieldAttributeEnum
{
    dbFixedField = 1,
    dbVariableField = 2,
    dbAutoIncrField = 16,
    dbUpdatableField = 32,
    dbSystemField = 8192,
    dbHyperlinkField = 32768,
    dbDescending = 1
};

enum __declspec(uuid("a692012e-5124-3b74-8929-14ecb6aa5d57"))
DataTypeEnum
{
    dbBoolean = 1,
    dbByte = 2,
    dbInteger = 3,
    dbLong = 4,
    dbCurrency = 5,
    dbSingle = 6,
    dbDouble = 7,
    dbDate = 8,
    dbBinary = 9,
    dbText = 10,
    dbLongBinary = 11,
    dbMemo = 12,
    dbGUID = 15,
    dbBigInt = 16,
    dbVarBinary = 17,
    dbChar = 18,
    dbNumeric = 19,
    dbDecimal = 20,
    dbFloat = 21,
    dbTime = 22,
    dbTimeStamp = 23,
    dbAttachment = 101,
    dbComplexByte = 102,
    dbComplexInteger = 103,
    dbComplexLong = 104,
    dbComplexSingle = 105,
    dbComplexDouble = 106,
    dbComplexGUID = 107,
    dbComplexDecimal = 108,
    dbComplexText = 109
};

enum __declspec(uuid("e9e3cb7c-052b-3808-a4a1-1ddb096de50c"))
RelationAttributeEnum
{
    dbRelationUnique = 1,
    dbRelationDontEnforce = 2,
    dbRelationInherited = 4,
    dbRelationUpdateCascade = 256,
    dbRelationDeleteCascade = 4096,
    dbRelationLeft = 16777216,
    dbRelationRight = 33554432
};

enum __declspec(uuid("42ea269e-1b51-38ce-9eba-78f23f4d8fdd"))
TableDefAttributeEnum
{
    dbAttachExclusive = 65536,
    dbAttachSavePWD = 131072,
    dbSystemObject = -2147483646,
    dbAttachedTable = 1073741824,
    dbAttachedODBC = 536870912,
    dbHiddenObject = 1
};

enum __declspec(uuid("a9be12a3-d3a1-3306-b4c3-73dc51cb7503"))
QueryDefTypeEnum
{
    dbQSelect = 0,
    dbQProcedure = 224,
    dbQAction = 240,
    dbQCrosstab = 16,
    dbQDelete = 32,
    dbQUpdate = 48,
    dbQAppend = 64,
    dbQMakeTable = 80,
    dbQDDL = 96,
    dbQSQLPassThrough = 112,
    dbQSetOperation = 128,
    dbQSPTBulk = 144,
    dbQCompound = 160
};

enum __declspec(uuid("aca374f6-9ca0-36fc-b36d-f90ff0e8683f"))
QueryDefStateEnum
{
    dbQPrepare = 1,
    dbQUnprepare = 2
};

enum __declspec(uuid("57cd4321-2aec-3a3a-b673-e9542ed0c9a3"))
DatabaseTypeEnum
{
    dbVersion10 = 1,
    dbEncrypt = 2,
    dbDecrypt = 4,
    dbVersion11 = 8,
    dbVersion20 = 16,
    dbVersion30 = 32,
    dbVersion40 = 64,
    dbVersion120 = 128,
    dbVersion140 = 256,
    dbVersion150 = 512,
    dbVersion167 = 1024
};

enum __declspec(uuid("c5bc1285-0a45-3c8c-8514-84979cfd0139"))
CollatingOrderEnum
{
    dbSortNeutral = 1024,
    dbSortArabic = 1025,
    dbSortCyrillic = 1049,
    dbSortCzech = 1029,
    dbSortDutch = 1043,
    dbSortGeneral = 1033,
    dbSortGreek = 1032,
    dbSortHebrew = 1037,
    dbSortHungarian = 1038,
    dbSortIcelandic = 1039,
    dbSortNorwdan = 1030,
    dbSortPDXIntl = 1033,
    dbSortPDXNor = 1030,
    dbSortPDXSwe = 1053,
    dbSortPolish = 1045,
    dbSortSpanish = 1034,
    dbSortSwedFin = 1053,
    dbSortTurkish = 1055,
    dbSortJapanese = 1041,
    dbSortChineseSimplified = 2052,
    dbSortChineseTraditional = 1028,
    dbSortKorean = 1042,
    dbSortThai = 1054,
    dbSortSlovenian = 1060,
    dbSortJapaneseRadicalStrokeCount = 263185,
    dbSortHindi = 1081,
    dbSortUndefined = -1
};

enum __declspec(uuid("191f6c41-7ae0-3fae-a6fc-b51be325c767"))
IdleEnum
{
    dbFreeLocks = 1,
    dbRefreshCache = 8
};

enum __declspec(uuid("2ef8e039-f0c8-3a24-b0c7-f151d7f584e5"))
PermissionEnum
{
    dbSecNoAccess = 0,
    dbSecFullAccess = 1048575,
    dbSecDelete = 65536,
    dbSecReadSec = 131072,
    dbSecWriteSec = 262144,
    dbSecWriteOwner = 524288,
    dbSecDBCreate = 1,
    dbSecDBOpen = 2,
    dbSecDBExclusive = 4,
    dbSecDBAdmin = 8,
    dbSecCreate = 1,
    dbSecReadDef = 4,
    dbSecWriteDef = 65548,
    dbSecRetrieveData = 20,
    dbSecInsertData = 32,
    dbSecReplaceData = 64,
    dbSecDeleteData = 128
};

enum __declspec(uuid("91de8e14-dee2-3ac6-bb31-415ee24effc9"))
SynchronizeTypeEnum
{
    dbRepExportChanges = 1,
    dbRepImportChanges = 2,
    dbRepImpExpChanges = 4,
    dbRepSyncInternet = 16
};

enum __declspec(uuid("7ad902d0-2c9f-3a6b-a1b6-a242d1206be9"))
ReplicaTypeEnum
{
    dbRepMakeReadOnly = 2,
    dbRepMakePartial = 1
};

enum __declspec(uuid("04465b7d-fd0c-38df-8ba5-6dae7b103dc9"))
WorkspaceTypeEnum
{
    dbUseODBC = 1,
    dbUseJet = 2
};

enum __declspec(uuid("d81a5990-6f34-3189-9f1d-1d503f601aed"))
CursorDriverEnum
{
    dbUseDefaultCursor = -1,
    dbUseODBCCursor = 1,
    dbUseServerCursor = 2,
    dbUseClientBatchCursor = 3,
    dbUseNoCursor = 4
};

enum __declspec(uuid("b8526372-3e87-3232-b6b5-3e5b10e11239"))
DriverPromptEnum
{
    dbDriverPrompt = 2,
    dbDriverNoPrompt = 1,
    dbDriverComplete = 0,
    dbDriverCompleteRequired = 3
};

enum __declspec(uuid("32e7bbc7-c15f-38f5-a17f-a073e51c1db3"))
SetOptionEnum
{
    dbPageTimeout = 6,
    dbLockRetry = 57,
    dbMaxBufferSize = 8,
    dbUserCommitSync = 58,
    dbImplicitCommitSync = 59,
    dbExclusiveAsyncDelay = 60,
    dbSharedAsyncDelay = 61,
    dbMaxLocksPerFile = 62,
    dbLockDelay = 63,
    dbRecycleLVs = 65,
    dbFlushTransactionTimeout = 66,
    dbPasswordEncryptionProvider = 80,
    dbPasswordEncryptionAlgorithm = 81,
    dbPasswordEncryptionKeyLength = 82
};

enum __declspec(uuid("70e6bc1d-51e5-389e-a24e-9ac51a17ea35"))
ParameterDirectionEnum
{
    dbParamInput = 1,
    dbParamOutput = 2,
    dbParamInputOutput = 3,
    dbParamReturnValue = 4
};

enum __declspec(uuid("384d0656-2a34-36fc-ac92-f2fb3072d0f8"))
UpdateTypeEnum
{
    dbUpdateBatch = 4,
    dbUpdateRegular = 1,
    dbUpdateCurrentRecord = 2
};

enum __declspec(uuid("9bc090b2-682f-3cee-ada0-09759acde44d"))
RecordStatusEnum
{
    dbRecordUnmodified = 0,
    dbRecordModified = 1,
    dbRecordNew = 2,
    dbRecordDeleted = 3,
    dbRecordDBDeleted = 4
};

enum __declspec(uuid("ab46cb4a-d340-3172-b681-3204abca661f"))
CommitTransOptionsEnum
{
    dbForceOSFlush = 1
};

enum __declspec(uuid("c8d258d0-9239-3c8d-a2f1-f483968220f6"))
_DAOSuppHelp
{
    LogMessages = 0,
    KeepLocal = 0,
    Replicable = 0,
    ReplicableBool = 0,
    V1xNullBehavior = 0
};
    const LPSTR dbLangArabic = (char*) ";LANGID=0x0401;CP=1256;COUNTRY=0";
    const LPSTR dbLangCzech = (char*) ";LANGID=0x0405;CP=1250;COUNTRY=0";
    const LPSTR dbLangDutch = (char*) ";LANGID=0x0413;CP=1252;COUNTRY=0";
    const LPSTR dbLangGeneral = (char*) ";LANGID=0x0409;CP=1252;COUNTRY=0";
    const LPSTR dbLangGreek = (char*) ";LANGID=0x0408;CP=1253;COUNTRY=0";
    const LPSTR dbLangHebrew = (char*) ";LANGID=0x040D;CP=1255;COUNTRY=0";
    const LPSTR dbLangHungarian = (char*) ";LANGID=0x040E;CP=1250;COUNTRY=0";
    const LPSTR dbLangIcelandic = (char*) ";LANGID=0x040F;CP=1252;COUNTRY=0";
    const LPSTR dbLangNordic = (char*) ";LANGID=0x041D;CP=1252;COUNTRY=0";
    const LPSTR dbLangNorwDan = (char*) ";LANGID=0x0406;CP=1252;COUNTRY=0";
    const LPSTR dbLangPolish = (char*) ";LANGID=0x0415;CP=1250;COUNTRY=0";
    const LPSTR dbLangCyrillic = (char*) ";LANGID=0x0419;CP=1251;COUNTRY=0";
    const LPSTR dbLangSpanish = (char*) ";LANGID=0x040A;CP=1252;COUNTRY=0";
    const LPSTR dbLangSwedFin = (char*) ";LANGID=0x041D;CP=1252;COUNTRY=0";
    const LPSTR dbLangTurkish = (char*) ";LANGID=0x041F;CP=1254;COUNTRY=0";
    const LPSTR dbLangJapanese = (char*) ";LANGID=0x0411;CP=932;COUNTRY=0";
    const LPSTR dbLangChineseSimplified = (char*) ";LANGID=0x0804;CP=936;COUNTRY=0";
    const LPSTR dbLangChineseTraditional = (char*) ";LANGID=0x0404;CP=950;COUNTRY=0";
    const LPSTR dbLangKorean = (char*) ";LANGID=0x0412;CP=949;COUNTRY=0";
    const LPSTR dbLangThai = (char*) ";LANGID=0x041E;CP=874;COUNTRY=0";
    const LPSTR dbLangSlovenian = (char*) ";LANGID=0x0424;CP=1250;COUNTRY=0";
    const LPSTR dbLangJapaneseRadicalStrokeCount = (char*) ";LANGID=0x00040411;CP=65001;COUNTRY=0";
    const LPSTR dbLangHindi = (char*) ";LANGID=0x00000439;CP=65001;COUNTRY=0";

struct __declspec(uuid("000000a0-0000-0010-8000-00aa006d2ea4"))
_Collection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    short Count;

    //
    // Wrapper methods for error-handling
    //

    short GetCount ( );
    IUnknownPtr _NewEnum ( );
    HRESULT Refresh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ short * c ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunk ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
};

struct __declspec(uuid("000000a2-0000-0010-8000-00aa006d2ea4"))
_DynaCollection : _Collection
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Append (
        IDispatch * Object );
    HRESULT Delete (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Append (
        /*[in]*/ IDispatch * Object ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("367e582c-f71c-4bf9-aa1b-9f62b793e9c5"))
TableDef;
    // [ default ] interface _TableDef

struct __declspec(uuid("0000004b-0000-0010-8000-00aa006d2ea4"))
TableDefs : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _TableDefPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _TableDefPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _TableDef * * pptdf ) = 0;
};

struct __declspec(uuid("a1eb89d6-0a9c-4575-a0ae-654a990a454c"))
Field;
    // [ default ] interface _Field

struct __declspec(uuid("00000053-0000-0010-8000-00aa006d2ea4"))
Fields : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _FieldPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _FieldPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _Field * * ppfld ) = 0;
};

struct __declspec(uuid("8d4f994c-ebbe-4f8d-ba4b-ae20cd36e72d"))
Index;
    // [ default ] interface _Index

struct __declspec(uuid("0000005b-0000-0010-8000-00aa006d2ea4"))
Indexes : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _IndexPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _IndexPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _Index * * ppidx ) = 0;
};

struct __declspec(uuid("d5ec4d34-77da-4f7a-b8c4-8a910c1c1cfe"))
QueryDef;
    // [ default ] interface _QueryDef

struct __declspec(uuid("0000007b-0000-0010-8000-00aa006d2ea4"))
QueryDefs : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _QueryDefPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _QueryDefPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _QueryDef * * ppqdef ) = 0;
};

struct __declspec(uuid("d0b22d03-d05d-4c6d-8ab7-9392e84a87b9"))
Relation;
    // [ default ] interface _Relation

struct __declspec(uuid("0000008b-0000-0010-8000-00aa006d2ea4"))
Relations : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _RelationPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _RelationPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _Relation * * pprel ) = 0;
};

struct __declspec(uuid("805b7f91-c9cf-4edf-aca6-775664fdfb3e"))
User;
    // [ default ] interface _User

struct __declspec(uuid("0000006b-0000-0010-8000-00aa006d2ea4"))
Users : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _UserPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _UserPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _User * * ppusr ) = 0;
};

struct __declspec(uuid("97a2762c-403c-4953-a121-7a75abce4373"))
Group;
    // [ default ] interface _Group

struct __declspec(uuid("00000063-0000-0010-8000-00aa006d2ea4"))
Groups : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _GroupPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    _GroupPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct _Group * * ppgrp ) = 0;
};

struct __declspec(uuid("00000023-0000-0010-8000-00aa006d2ea4"))
Error : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetSource))
    _bstr_t Source;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetHelpContext))
    long HelpContext;

    //
    // Wrapper methods for error-handling
    //

    long GetNumber ( );
    _bstr_t GetSource ( );
    _bstr_t GetDescription ( );
    _bstr_t GetHelpFile ( );
    long GetHelpContext ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_HelpContext (
        /*[out,retval]*/ long * pl ) = 0;
};

struct __declspec(uuid("00000025-0000-0010-8000-00aa006d2ea4"))
Errors : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ErrorPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ErrorPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Error * * pperr ) = 0;
};

struct __declspec(uuid("0000009d-0000-0010-8000-00aa006d2ea4"))
ComplexType : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFields))
    FieldsPtr Fields;

    //
    // Wrapper methods for error-handling
    //

    FieldsPtr GetFields ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct Fields * * ppflds ) = 0;
};

struct __declspec(uuid("cd7791b9-43fd-42c5-ae42-8dd2811f0419"))
DBEngine;
    // [ default ] interface _DBEngine

struct __declspec(uuid("6f3dd387-5af2-492b-bde2-30ff2f451241"))
PrivDBEngine;
    // [ default ] interface _DBEngine

struct __declspec(uuid("0000005d-0000-0010-8000-00aa006d2ea4"))
IndexFields : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetItem (
        const _variant_t & Item = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
};

struct __declspec(uuid("0000000a-0000-0010-8000-00aa006d2ea4"))
_DAO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    PropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    PropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct Properties * * ppprops ) = 0;
};

struct __declspec(uuid("00000027-0000-0010-8000-00aa006d2ea4"))
Property : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType,put=PutType))
    short Type;
    __declspec(property(get=GetInherited))
    VARIANT_BOOL Inherited;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pval );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    short GetType ( );
    void PutType (
        short ptype );
    VARIANT_BOOL GetInherited ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pval ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pval ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ short * ptype ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ short ptype ) = 0;
      virtual HRESULT __stdcall get_Inherited (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
};

struct __declspec(uuid("00000029-0000-0010-8000-00aa006d2ea4"))
Properties : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    PropertyPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    PropertyPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Property * * ppprop ) = 0;
};

struct __declspec(uuid("00000051-0000-0010-8000-00aa006d2ea4"))
_Field : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetCollatingOrder))
    long CollatingOrder;
    __declspec(property(get=GetType,put=PutType))
    short Type;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCollectionIndex))
    short CollectionIndex;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetOriginalValue))
    _variant_t OriginalValue;
    __declspec(property(get=GetSourceField))
    _bstr_t SourceField;
    __declspec(property(get=GetSourceTable))
    _bstr_t SourceTable;
    __declspec(property(get=GetVisibleValue))
    _variant_t VisibleValue;
    __declspec(property(get=GetFieldSize))
    long FieldSize;
    __declspec(property(get=GetAttributes,put=PutAttributes))
    long Attributes;
    __declspec(property(get=GetOrdinalPosition,put=PutOrdinalPosition))
    short OrdinalPosition;
    __declspec(property(get=GetValidationText,put=PutValidationText))
    _bstr_t ValidationText;
    __declspec(property(get=GetValidateOnSet,put=PutValidateOnSet))
    VARIANT_BOOL ValidateOnSet;
    __declspec(property(get=GetValidationRule,put=PutValidationRule))
    _bstr_t ValidationRule;
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetRequired,put=PutRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetAllowZeroLength,put=PutAllowZeroLength))
    VARIANT_BOOL AllowZeroLength;
    __declspec(property(get=GetDataUpdatable))
    VARIANT_BOOL DataUpdatable;
    __declspec(property(get=GetForeignName,put=PutForeignName))
    _bstr_t ForeignName;

    //
    // Wrapper methods for error-handling
    //

    long GetCollatingOrder ( );
    short GetType ( );
    void PutType (
        short ps );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    long GetSize ( );
    void PutSize (
        long pl );
    _bstr_t GetSourceField ( );
    _bstr_t GetSourceTable ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pvar );
    long GetAttributes ( );
    void PutAttributes (
        long pl );
    short GetOrdinalPosition ( );
    void PutOrdinalPosition (
        short ps );
    _bstr_t GetValidationText ( );
    void PutValidationText (
        _bstr_t pbstr );
    VARIANT_BOOL GetValidateOnSet ( );
    void PutValidateOnSet (
        VARIANT_BOOL pb );
    _bstr_t GetValidationRule ( );
    void PutValidationRule (
        _bstr_t pbstr );
    _variant_t GetDefaultValue ( );
    void PutDefaultValue (
        const _variant_t & pvar );
    VARIANT_BOOL GetRequired ( );
    void PutRequired (
        VARIANT_BOOL pb );
    VARIANT_BOOL GetAllowZeroLength ( );
    void PutAllowZeroLength (
        VARIANT_BOOL pb );
    VARIANT_BOOL GetDataUpdatable ( );
    _bstr_t GetForeignName ( );
    void PutForeignName (
        _bstr_t pbstr );
    HRESULT AppendChunk (
        const _variant_t & Val );
    _variant_t GetChunk (
        long Offset,
        long Bytes );
    long _30_FieldSize ( );
    PropertyPtr CreateProperty (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & DDL = vtMissing );
    short GetCollectionIndex ( );
    _variant_t GetOriginalValue ( );
    _variant_t GetVisibleValue ( );
    long GetFieldSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CollatingOrder (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_SourceField (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_SourceTable (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_Attributes (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_OrdinalPosition (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_OrdinalPosition (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_ValidationText (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_ValidationText (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_ValidateOnSet (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_ValidateOnSet (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_ValidationRule (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_ValidationRule (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_Required (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_AllowZeroLength (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_AllowZeroLength (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_DataUpdatable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_ForeignName (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_ForeignName (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall raw_AppendChunk (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall raw_GetChunk (
        /*[in]*/ long Offset,
        /*[in]*/ long Bytes,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall raw__30_FieldSize (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall raw_CreateProperty (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT DDL,
        /*[out,retval]*/ struct Property * * pprp ) = 0;
      virtual HRESULT __stdcall get_CollectionIndex (
        /*[out,retval]*/ short * i ) = 0;
      virtual HRESULT __stdcall get_OriginalValue (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_VisibleValue (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_FieldSize (
        /*[out,retval]*/ long * pl ) = 0;
};

struct __declspec(uuid("00000059-0000-0010-8000-00aa006d2ea4"))
_Index : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetForeign))
    VARIANT_BOOL Foreign;
    __declspec(property(get=GetUnique,put=PutUnique))
    VARIANT_BOOL Unique;
    __declspec(property(get=GetClustered,put=PutClustered))
    VARIANT_BOOL Clustered;
    __declspec(property(get=GetRequired,put=PutRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetIgnoreNulls,put=PutIgnoreNulls))
    VARIANT_BOOL IgnoreNulls;
    __declspec(property(get=GetPrimary,put=PutPrimary))
    VARIANT_BOOL Primary;
    __declspec(property(get=GetDistinctCount))
    long DistinctCount;
    __declspec(property(get=GetFields,put=PutFields))
    _variant_t Fields;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    VARIANT_BOOL GetForeign ( );
    VARIANT_BOOL GetUnique ( );
    void PutUnique (
        VARIANT_BOOL pb );
    VARIANT_BOOL GetClustered ( );
    void PutClustered (
        VARIANT_BOOL pb );
    VARIANT_BOOL GetRequired ( );
    void PutRequired (
        VARIANT_BOOL pb );
    VARIANT_BOOL GetIgnoreNulls ( );
    void PutIgnoreNulls (
        VARIANT_BOOL pb );
    VARIANT_BOOL GetPrimary ( );
    void PutPrimary (
        VARIANT_BOOL pb );
    long GetDistinctCount ( );
    _variant_t GetFields ( );
    void PutFields (
        const _variant_t & pv );
    _FieldPtr CreateField (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Size = vtMissing );
    PropertyPtr CreateProperty (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & DDL = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Foreign (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Unique (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_Unique (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_Clustered (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_Clustered (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_Required (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_IgnoreNulls (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_IgnoreNulls (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_Primary (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_Primary (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_DistinctCount (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ VARIANT * pv ) = 0;
      virtual HRESULT __stdcall put_Fields (
        /*[in]*/ VARIANT pv ) = 0;
      virtual HRESULT __stdcall raw_CreateField (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Size,
        /*[out,retval]*/ struct _Field * * ppfld ) = 0;
      virtual HRESULT __stdcall raw_CreateProperty (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT DDL,
        /*[out,retval]*/ struct Property * * pprp ) = 0;
};

struct __declspec(uuid("00000081-0000-0010-8000-00aa006d2ea4"))
Parameter : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetType,put=PutType))
    short Type;
    __declspec(property(get=GetDirection,put=PutDirection))
    short Direction;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pvar );
    short GetType ( );
    void PutType (
        short ps );
    short GetDirection ( );
    void PutDirection (
        short pOption );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ short * pOption ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ short pOption ) = 0;
};

struct __declspec(uuid("00000083-0000-0010-8000-00aa006d2ea4"))
Parameters : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ParameterPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ParameterPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Parameter * * ppprm ) = 0;
};

struct __declspec(uuid("00000089-0000-0010-8000-00aa006d2ea4"))
_Relation : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetTable,put=PutTable))
    _bstr_t Table;
    __declspec(property(get=GetForeignTable,put=PutForeignTable))
    _bstr_t ForeignTable;
    __declspec(property(get=GetAttributes,put=PutAttributes))
    long Attributes;
    __declspec(property(get=GetPartialReplica,put=PutPartialReplica))
    VARIANT_BOOL PartialReplica;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    _bstr_t GetTable ( );
    void PutTable (
        _bstr_t pbstr );
    _bstr_t GetForeignTable ( );
    void PutForeignTable (
        _bstr_t pbstr );
    long GetAttributes ( );
    void PutAttributes (
        long pl );
    FieldsPtr GetFields ( );
    _FieldPtr CreateField (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Size = vtMissing );
    VARIANT_BOOL GetPartialReplica ( );
    void PutPartialReplica (
        VARIANT_BOOL pfPartialReplica );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Table (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_ForeignTable (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_ForeignTable (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_Attributes (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct Fields * * ppflds ) = 0;
      virtual HRESULT __stdcall raw_CreateField (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Size,
        /*[out,retval]*/ struct _Field * * ppfld ) = 0;
      virtual HRESULT __stdcall get_PartialReplica (
        /*[out,retval]*/ VARIANT_BOOL * pfPartialReplica ) = 0;
      virtual HRESULT __stdcall put_PartialReplica (
        /*[in]*/ VARIANT_BOOL pfPartialReplica ) = 0;
};

struct __declspec(uuid("00000099-0000-0010-8000-00aa006d2ea4"))
Document : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetOwner,put=PutOwner))
    _bstr_t Owner;
    __declspec(property(get=GetContainer))
    _bstr_t Container;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName;
    __declspec(property(get=GetPermissions,put=PutPermissions))
    long Permissions;
    __declspec(property(get=GetDateCreated))
    _variant_t DateCreated;
    __declspec(property(get=GetLastUpdated))
    _variant_t LastUpdated;
    __declspec(property(get=GetAllPermissions))
    long AllPermissions;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetOwner ( );
    void PutOwner (
        _bstr_t pbstr );
    _bstr_t GetContainer ( );
    _bstr_t GetUserName ( );
    void PutUserName (
        _bstr_t pbstr );
    long GetPermissions ( );
    void PutPermissions (
        long pl );
    _variant_t GetDateCreated ( );
    _variant_t GetLastUpdated ( );
    long GetAllPermissions ( );
    PropertyPtr CreateProperty (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & DDL = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Owner (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Owner (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Permissions (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_Permissions (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_DateCreated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_LastUpdated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_AllPermissions (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall raw_CreateProperty (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT DDL,
        /*[out,retval]*/ struct Property * * pprp ) = 0;
};

struct __declspec(uuid("0000009b-0000-0010-8000-00aa006d2ea4"))
Documents : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    DocumentPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    DocumentPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Document * * ppdoc ) = 0;
};

struct __declspec(uuid("00000091-0000-0010-8000-00aa006d2ea4"))
Container : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetOwner,put=PutOwner))
    _bstr_t Owner;
    __declspec(property(get=GetDocuments))
    DocumentsPtr Documents;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName;
    __declspec(property(get=GetPermissions,put=PutPermissions))
    long Permissions;
    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetAllPermissions))
    long AllPermissions;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetOwner ( );
    void PutOwner (
        _bstr_t pbstr );
    _bstr_t GetUserName ( );
    void PutUserName (
        _bstr_t pbstr );
    long GetPermissions ( );
    void PutPermissions (
        long pl );
    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pb );
    DocumentsPtr GetDocuments ( );
    long GetAllPermissions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Owner (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Owner (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Permissions (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_Permissions (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct Documents * * ppdocs ) = 0;
      virtual HRESULT __stdcall get_AllPermissions (
        /*[out,retval]*/ long * pl ) = 0;
};

struct __declspec(uuid("00000093-0000-0010-8000-00aa006d2ea4"))
Containers : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ContainerPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ContainerPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Container * * ppctn ) = 0;
};

struct __declspec(uuid("00000069-0000-0010-8000-00aa006d2ea4"))
_User : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroups))
    GroupsPtr Groups;
    __declspec(property(put=PutPID))
    _bstr_t PID;
    __declspec(property(put=PutPassword))
    _bstr_t Password;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    void PutPID (
        _bstr_t _arg1 );
    void PutPassword (
        _bstr_t _arg1 );
    GroupsPtr GetGroups ( );
    HRESULT NewPassword (
        _bstr_t bstrOld,
        _bstr_t bstrNew );
    _GroupPtr CreateGroup (
        const _variant_t & Name = vtMissing,
        const _variant_t & PID = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_PID (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct Groups * * ppgrps ) = 0;
      virtual HRESULT __stdcall raw_NewPassword (
        /*[in]*/ BSTR bstrOld,
        /*[in]*/ BSTR bstrNew ) = 0;
      virtual HRESULT __stdcall raw_CreateGroup (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT PID,
        /*[out,retval]*/ struct _Group * * ppgrp ) = 0;
};

struct __declspec(uuid("00000061-0000-0010-8000-00aa006d2ea4"))
_Group : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUsers))
    UsersPtr Users;
    __declspec(property(put=PutPID))
    _bstr_t PID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    void PutPID (
        _bstr_t _arg1 );
    UsersPtr GetUsers ( );
    _UserPtr CreateUser (
        const _variant_t & Name = vtMissing,
        const _variant_t & PID = vtMissing,
        const _variant_t & Password = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_PID (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct Users * * ppusrs ) = 0;
      virtual HRESULT __stdcall raw_CreateUser (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT PID,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct _User * * ppusr ) = 0;
};

struct __declspec(uuid("00000054-0000-0010-8000-00aa006d2ea4"))
Field2 : _Field
{
    //
    // Property data
    //

    __declspec(property(get=GetComplexType))
    ComplexTypePtr ComplexType;
    __declspec(property(get=GetIsComplex))
    VARIANT_BOOL IsComplex;
    __declspec(property(get=GetAppendOnly,put=PutAppendOnly))
    VARIANT_BOOL AppendOnly;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;

    //
    // Wrapper methods for error-handling
    //

    ComplexTypePtr GetComplexType ( );
    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT SaveToFile (
        _bstr_t FileName );
    VARIANT_BOOL GetIsComplex ( );
    VARIANT_BOOL GetAppendOnly ( );
    void PutAppendOnly (
        VARIANT_BOOL pb );
    _bstr_t GetExpression ( );
    void PutExpression (
        _bstr_t pbstr );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComplexType (
        /*[out,retval]*/ struct ComplexType * * ppComplexType ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_IsComplex (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_AppendOnly (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_AppendOnly (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR pbstr ) = 0;
};

struct __declspec(uuid("00000021-0000-0010-8000-00aa006d2ea4"))
_DBEngine : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetIniPath,put=PutIniPath))
    _bstr_t IniPath;
    __declspec(property(get=GetWorkspaces))
    WorkspacesPtr Workspaces;
    __declspec(property(put=PutDefaultUser))
    _bstr_t DefaultUser;
    __declspec(property(put=PutDefaultPassword))
    _bstr_t DefaultPassword;
    __declspec(property(get=GetLoginTimeout,put=PutLoginTimeout))
    short LoginTimeout;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetSystemDB,put=PutSystemDB))
    _bstr_t SystemDB;
    __declspec(property(get=GetDefaultType,put=PutDefaultType))
    long DefaultType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetIniPath ( );
    void PutIniPath (
        _bstr_t pbstr );
    void PutDefaultUser (
        _bstr_t _arg1 );
    void PutDefaultPassword (
        _bstr_t _arg1 );
    short GetLoginTimeout ( );
    void PutLoginTimeout (
        short ps );
    WorkspacesPtr GetWorkspaces ( );
    ErrorsPtr GetErrors ( );
    HRESULT Idle (
        const _variant_t & Action = vtMissing );
    HRESULT CompactDatabase (
        _bstr_t SrcName,
        _bstr_t DstName,
        const _variant_t & DstLocale = vtMissing,
        const _variant_t & Options = vtMissing,
        const _variant_t & SrcLocale = vtMissing );
    HRESULT RepairDatabase (
        _bstr_t Name );
    HRESULT RegisterDatabase (
        _bstr_t Dsn,
        _bstr_t Driver,
        VARIANT_BOOL Silent,
        _bstr_t Attributes );
    WorkspacePtr _30_CreateWorkspace (
        _bstr_t Name,
        _bstr_t UserName,
        _bstr_t Password );
    DatabasePtr OpenDatabase (
        _bstr_t Name,
        const _variant_t & Options = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Connect = vtMissing );
    DatabasePtr CreateDatabase (
        _bstr_t Name,
        _bstr_t Locale,
        const _variant_t & Option = vtMissing );
    HRESULT FreeLocks ( );
    HRESULT BeginTrans ( );
    HRESULT CommitTrans (
        long Option );
    HRESULT Rollback ( );
    HRESULT SetDefaultWorkspace (
        _bstr_t Name,
        _bstr_t Password );
    HRESULT SetDataAccessOption (
        short Option,
        const _variant_t & Value );
    long ISAMStats (
        long StatNum,
        const _variant_t & Reset = vtMissing );
    _bstr_t GetSystemDB ( );
    void PutSystemDB (
        _bstr_t pbstr );
    WorkspacePtr CreateWorkspace (
        _bstr_t Name,
        _bstr_t UserName,
        _bstr_t Password,
        const _variant_t & UseType = vtMissing );
    ConnectionPtr OpenConnection (
        _bstr_t Name,
        const _variant_t & Options = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Connect = vtMissing );
    long GetDefaultType ( );
    void PutDefaultType (
        long Option );
    HRESULT SetOption (
        long Option,
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_IniPath (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_IniPath (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_DefaultUser (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_DefaultPassword (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_LoginTimeout (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_LoginTimeout (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_Workspaces (
        /*[out,retval]*/ struct Workspaces * * ppworks ) = 0;
      virtual HRESULT __stdcall get_Errors (
        /*[out,retval]*/ struct Errors * * pperrs ) = 0;
      virtual HRESULT __stdcall raw_Idle (
        /*[in]*/ VARIANT Action = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CompactDatabase (
        /*[in]*/ BSTR SrcName,
        /*[in]*/ BSTR DstName,
        /*[in]*/ VARIANT DstLocale = vtMissing,
        /*[in]*/ VARIANT Options = vtMissing,
        /*[in]*/ VARIANT SrcLocale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RepairDatabase (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_RegisterDatabase (
        /*[in]*/ BSTR Dsn,
        /*[in]*/ BSTR Driver,
        /*[in]*/ VARIANT_BOOL Silent,
        /*[in]*/ BSTR Attributes ) = 0;
      virtual HRESULT __stdcall raw__30_CreateWorkspace (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR UserName,
        /*[in]*/ BSTR Password,
        /*[out,retval]*/ struct Workspace * * ppwrk ) = 0;
      virtual HRESULT __stdcall raw_OpenDatabase (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Connect,
        /*[out,retval]*/ struct Database * * ppDb ) = 0;
      virtual HRESULT __stdcall raw_CreateDatabase (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Locale,
        /*[in]*/ VARIANT Option,
        /*[out,retval]*/ struct Database * * ppDb ) = 0;
      virtual HRESULT __stdcall raw_FreeLocks ( ) = 0;
      virtual HRESULT __stdcall raw_BeginTrans ( ) = 0;
      virtual HRESULT __stdcall raw_CommitTrans (
        /*[in]*/ long Option ) = 0;
      virtual HRESULT __stdcall raw_Rollback ( ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultWorkspace (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_SetDataAccessOption (
        /*[in]*/ short Option,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_ISAMStats (
        /*[in]*/ long StatNum,
        /*[in]*/ VARIANT Reset,
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_SystemDB (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_SystemDB (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall raw_CreateWorkspace (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR UserName,
        /*[in]*/ BSTR Password,
        /*[in]*/ VARIANT UseType,
        /*[out,retval]*/ struct Workspace * * ppwrk ) = 0;
      virtual HRESULT __stdcall raw_OpenConnection (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Connect,
        /*[out,retval]*/ struct Connection * * ppconn ) = 0;
      virtual HRESULT __stdcall get_DefaultType (
        /*[out,retval]*/ long * Option ) = 0;
      virtual HRESULT __stdcall put_DefaultType (
        /*[in]*/ long Option ) = 0;
      virtual HRESULT __stdcall raw_SetOption (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("0000003b-0000-0010-8000-00aa006d2ea4"))
Workspaces : _DynaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    WorkspacePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    WorkspacePtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Workspace * * ppwrk ) = 0;
};

struct __declspec(uuid("00000039-0000-0010-8000-00aa006d2ea4"))
Workspace : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDatabases))
    DatabasesPtr Databases;
    __declspec(property(get=GetUserName))
    _bstr_t UserName;
    __declspec(property(put=Put_30_UserName))
    _bstr_t _30_UserName;
    __declspec(property(put=Put_30_Password))
    _bstr_t _30_Password;
    __declspec(property(get=GetIsolateODBCTrans,put=PutIsolateODBCTrans))
    short IsolateODBCTrans;
    __declspec(property(get=GetUsers))
    UsersPtr Users;
    __declspec(property(get=GetGroups))
    GroupsPtr Groups;
    __declspec(property(get=GetLoginTimeout,put=PutLoginTimeout))
    long LoginTimeout;
    __declspec(property(get=GetDefaultCursorDriver,put=PutDefaultCursorDriver))
    long DefaultCursorDriver;
    __declspec(property(get=GethEnv))
    long hEnv;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetConnections))
    ConnectionsPtr Connections;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    _bstr_t GetUserName ( );
    void Put_30_UserName (
        _bstr_t _arg1 );
    void Put_30_Password (
        _bstr_t _arg1 );
    short GetIsolateODBCTrans ( );
    void PutIsolateODBCTrans (
        short ps );
    DatabasesPtr GetDatabases ( );
    UsersPtr GetUsers ( );
    GroupsPtr GetGroups ( );
    HRESULT BeginTrans ( );
    HRESULT CommitTrans (
        long Options );
    HRESULT Close ( );
    HRESULT Rollback ( );
    DatabasePtr OpenDatabase (
        _bstr_t Name,
        const _variant_t & Options = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Connect = vtMissing );
    DatabasePtr CreateDatabase (
        _bstr_t Name,
        _bstr_t Connect,
        const _variant_t & Option = vtMissing );
    _UserPtr CreateUser (
        const _variant_t & Name = vtMissing,
        const _variant_t & PID = vtMissing,
        const _variant_t & Password = vtMissing );
    _GroupPtr CreateGroup (
        const _variant_t & Name = vtMissing,
        const _variant_t & PID = vtMissing );
    ConnectionPtr OpenConnection (
        _bstr_t Name,
        const _variant_t & Options = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Connect = vtMissing );
    long GetLoginTimeout ( );
    void PutLoginTimeout (
        long pTimeout );
    long GetDefaultCursorDriver ( );
    void PutDefaultCursorDriver (
        long pCursorType );
    long GethEnv ( );
    long GetType ( );
    ConnectionsPtr GetConnections ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put__30_UserName (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put__30_Password (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_IsolateODBCTrans (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_IsolateODBCTrans (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_Databases (
        /*[out,retval]*/ struct Databases * * ppdbs ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct Users * * ppusrs ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct Groups * * ppgrps ) = 0;
      virtual HRESULT __stdcall raw_BeginTrans ( ) = 0;
      virtual HRESULT __stdcall raw_CommitTrans (
        /*[in]*/ long Options ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Rollback ( ) = 0;
      virtual HRESULT __stdcall raw_OpenDatabase (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Connect,
        /*[out,retval]*/ struct Database * * ppDb ) = 0;
      virtual HRESULT __stdcall raw_CreateDatabase (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Connect,
        /*[in]*/ VARIANT Option,
        /*[out,retval]*/ struct Database * * ppDb ) = 0;
      virtual HRESULT __stdcall raw_CreateUser (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT PID,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct _User * * ppusr ) = 0;
      virtual HRESULT __stdcall raw_CreateGroup (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT PID,
        /*[out,retval]*/ struct _Group * * ppgrp ) = 0;
      virtual HRESULT __stdcall raw_OpenConnection (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Connect,
        /*[out,retval]*/ struct Connection * * ppconn ) = 0;
      virtual HRESULT __stdcall get_LoginTimeout (
        /*[out,retval]*/ long * pTimeout ) = 0;
      virtual HRESULT __stdcall put_LoginTimeout (
        /*[in]*/ long pTimeout ) = 0;
      virtual HRESULT __stdcall get_DefaultCursorDriver (
        /*[out,retval]*/ long * pCursorType ) = 0;
      virtual HRESULT __stdcall put_DefaultCursorDriver (
        /*[in]*/ long pCursorType ) = 0;
      virtual HRESULT __stdcall get_hEnv (
        /*[out,retval]*/ long * phEnv ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * ptype ) = 0;
      virtual HRESULT __stdcall get_Connections (
        /*[out,retval]*/ struct Connections * * ppcns ) = 0;
};

struct __declspec(uuid("00000073-0000-0010-8000-00aa006d2ea4"))
Databases : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    DatabasePtr Item[];

    //
    // Wrapper methods for error-handling
    //

    DatabasePtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Database * * ppDb ) = 0;
};

struct __declspec(uuid("00000071-0000-0010-8000-00aa006d2ea4"))
Database : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetCollatingOrder))
    long CollatingOrder;
    __declspec(property(get=GetConnect,put=PutConnect))
    _bstr_t Connect;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetQueryTimeout,put=PutQueryTimeout))
    short QueryTimeout;
    __declspec(property(get=GetTableDefs))
    TableDefsPtr TableDefs;
    __declspec(property(get=GetTransactions))
    VARIANT_BOOL Transactions;
    __declspec(property(get=GetUpdatable))
    VARIANT_BOOL Updatable;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetRecordsAffected))
    long RecordsAffected;
    __declspec(property(get=GetReplicaID))
    _bstr_t ReplicaID;
    __declspec(property(get=GetQueryDefs))
    QueryDefsPtr QueryDefs;
    __declspec(property(get=GetRelations))
    RelationsPtr Relations;
    __declspec(property(get=GetContainers))
    ContainersPtr Containers;
    __declspec(property(get=GetRecordsets))
    RecordsetsPtr Recordsets;
    __declspec(property(get=GetDesignMasterID,put=PutDesignMasterID))
    _bstr_t DesignMasterID;
    __declspec(property(get=GetConnection))
    ConnectionPtr Connection;

    //
    // Wrapper methods for error-handling
    //

    long GetCollatingOrder ( );
    _bstr_t GetConnect ( );
    _bstr_t GetName ( );
    short GetQueryTimeout ( );
    void PutQueryTimeout (
        short ps );
    VARIANT_BOOL GetTransactions ( );
    VARIANT_BOOL GetUpdatable ( );
    _bstr_t GetVersion ( );
    long GetRecordsAffected ( );
    TableDefsPtr GetTableDefs ( );
    QueryDefsPtr GetQueryDefs ( );
    RelationsPtr GetRelations ( );
    ContainersPtr GetContainers ( );
    RecordsetsPtr GetRecordsets ( );
    HRESULT Close ( );
    HRESULT Execute (
        _bstr_t Query,
        const _variant_t & Options = vtMissing );
    RecordsetPtr _30_OpenRecordset (
        _bstr_t Name,
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing );
    PropertyPtr CreateProperty (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & DDL = vtMissing );
    _RelationPtr CreateRelation (
        const _variant_t & Name = vtMissing,
        const _variant_t & Table = vtMissing,
        const _variant_t & ForeignTable = vtMissing,
        const _variant_t & Attributes = vtMissing );
    _TableDefPtr CreateTableDef (
        const _variant_t & Name = vtMissing,
        const _variant_t & Attributes = vtMissing,
        const _variant_t & SourceTableName = vtMissing,
        const _variant_t & Connect = vtMissing );
    HRESULT BeginTrans ( );
    HRESULT CommitTrans (
        long Options );
    HRESULT Rollback ( );
    RecordsetPtr CreateDynaset (
        _bstr_t Name,
        const _variant_t & Options = vtMissing,
        const _variant_t & Inconsistent = vtMissing );
    _QueryDefPtr CreateQueryDef (
        const _variant_t & Name = vtMissing,
        const _variant_t & SQLText = vtMissing );
    RecordsetPtr CreateSnapshot (
        _bstr_t Source,
        const _variant_t & Options = vtMissing );
    HRESULT DeleteQueryDef (
        _bstr_t Name );
    long ExecuteSQL (
        _bstr_t SQL );
    RecordsetPtr ListFields (
        _bstr_t Name );
    RecordsetPtr ListTables ( );
    _QueryDefPtr OpenQueryDef (
        _bstr_t Name );
    RecordsetPtr OpenTable (
        _bstr_t Name,
        const _variant_t & Options = vtMissing );
    _bstr_t GetReplicaID ( );
    _bstr_t GetDesignMasterID ( );
    void PutDesignMasterID (
        _bstr_t pbstr );
    HRESULT Synchronize (
        _bstr_t DbPathName,
        const _variant_t & ExchangeType = vtMissing );
    HRESULT MakeReplica (
        _bstr_t PathName,
        _bstr_t Description,
        const _variant_t & Options = vtMissing );
    void PutConnect (
        _bstr_t pbstr );
    HRESULT NewPassword (
        _bstr_t bstrOld,
        _bstr_t bstrNew );
    RecordsetPtr OpenRecordset (
        _bstr_t Name,
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing,
        const _variant_t & LockEdit = vtMissing );
    ConnectionPtr GetConnection ( );
    HRESULT PopulatePartial (
        _bstr_t DbPathName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CollatingOrder (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_QueryTimeout (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_QueryTimeout (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_Transactions (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Updatable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_RecordsAffected (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_TableDefs (
        /*[out,retval]*/ struct TableDefs * * pptdfs ) = 0;
      virtual HRESULT __stdcall get_QueryDefs (
        /*[out,retval]*/ struct QueryDefs * * ppqdfs ) = 0;
      virtual HRESULT __stdcall get_Relations (
        /*[out,retval]*/ struct Relations * * pprls ) = 0;
      virtual HRESULT __stdcall get_Containers (
        /*[out,retval]*/ struct Containers * * ppctns ) = 0;
      virtual HRESULT __stdcall get_Recordsets (
        /*[out,retval]*/ struct Recordsets * * pprsts ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ BSTR Query,
        /*[in]*/ VARIANT Options = vtMissing ) = 0;
      virtual HRESULT __stdcall raw__30_OpenRecordset (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_CreateProperty (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT DDL,
        /*[out,retval]*/ struct Property * * pprp ) = 0;
      virtual HRESULT __stdcall raw_CreateRelation (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Table,
        /*[in]*/ VARIANT ForeignTable,
        /*[in]*/ VARIANT Attributes,
        /*[out,retval]*/ struct _Relation * * pprel ) = 0;
      virtual HRESULT __stdcall raw_CreateTableDef (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Attributes,
        /*[in]*/ VARIANT SourceTableName,
        /*[in]*/ VARIANT Connect,
        /*[out,retval]*/ struct _TableDef * * pptdf ) = 0;
      virtual HRESULT __stdcall raw_BeginTrans ( ) = 0;
      virtual HRESULT __stdcall raw_CommitTrans (
        /*[in]*/ long Options ) = 0;
      virtual HRESULT __stdcall raw_Rollback ( ) = 0;
      virtual HRESULT __stdcall raw_CreateDynaset (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT Inconsistent,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_CreateQueryDef (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT SQLText,
        /*[out,retval]*/ struct _QueryDef * * ppqdf ) = 0;
      virtual HRESULT __stdcall raw_CreateSnapshot (
        /*[in]*/ BSTR Source,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_DeleteQueryDef (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_ExecuteSQL (
        /*[in]*/ BSTR SQL,
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall raw_ListFields (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_ListTables (
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_OpenQueryDef (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct _QueryDef * * ppqdf ) = 0;
      virtual HRESULT __stdcall raw_OpenTable (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall get_ReplicaID (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_DesignMasterID (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_DesignMasterID (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall raw_Synchronize (
        /*[in]*/ BSTR DbPathName,
        /*[in]*/ VARIANT ExchangeType = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_MakeReplica (
        /*[in]*/ BSTR PathName,
        /*[in]*/ BSTR Description,
        /*[in]*/ VARIANT Options = vtMissing ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall raw_NewPassword (
        /*[in]*/ BSTR bstrOld,
        /*[in]*/ BSTR bstrNew ) = 0;
      virtual HRESULT __stdcall raw_OpenRecordset (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT LockEdit,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ struct Connection * * ppCn ) = 0;
      virtual HRESULT __stdcall raw_PopulatePartial (
        /*[in]*/ BSTR DbPathName ) = 0;
};

struct __declspec(uuid("00000049-0000-0010-8000-00aa006d2ea4"))
_TableDef : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributes,put=PutAttributes))
    long Attributes;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetConnect,put=PutConnect))
    _bstr_t Connect;
    __declspec(property(get=GetDateCreated))
    _variant_t DateCreated;
    __declspec(property(get=GetLastUpdated))
    _variant_t LastUpdated;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSourceTableName,put=PutSourceTableName))
    _bstr_t SourceTableName;
    __declspec(property(get=GetUpdatable))
    VARIANT_BOOL Updatable;
    __declspec(property(get=GetValidationText,put=PutValidationText))
    _bstr_t ValidationText;
    __declspec(property(get=GetValidationRule,put=PutValidationRule))
    _bstr_t ValidationRule;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetIndexes))
    IndexesPtr Indexes;
    __declspec(property(get=GetConflictTable))
    _bstr_t ConflictTable;
    __declspec(property(get=GetReplicaFilter,put=PutReplicaFilter))
    _variant_t ReplicaFilter;

    //
    // Wrapper methods for error-handling
    //

    long GetAttributes ( );
    void PutAttributes (
        long pl );
    _bstr_t GetConnect ( );
    void PutConnect (
        _bstr_t pbstr );
    _variant_t GetDateCreated ( );
    _variant_t GetLastUpdated ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    _bstr_t GetSourceTableName ( );
    void PutSourceTableName (
        _bstr_t pbstr );
    VARIANT_BOOL GetUpdatable ( );
    _bstr_t GetValidationText ( );
    void PutValidationText (
        _bstr_t pbstr );
    _bstr_t GetValidationRule ( );
    void PutValidationRule (
        _bstr_t pbstr );
    long GetRecordCount ( );
    FieldsPtr GetFields ( );
    IndexesPtr GetIndexes ( );
    RecordsetPtr OpenRecordset (
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing );
    HRESULT RefreshLink ( );
    _FieldPtr CreateField (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Size = vtMissing );
    _IndexPtr CreateIndex (
        const _variant_t & Name = vtMissing );
    PropertyPtr CreateProperty (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & DDL = vtMissing );
    _bstr_t GetConflictTable ( );
    _variant_t GetReplicaFilter ( );
    void PutReplicaFilter (
        const _variant_t & pFilter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_Attributes (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_DateCreated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_LastUpdated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_SourceTableName (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_SourceTableName (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Updatable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_ValidationText (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_ValidationText (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_ValidationRule (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_ValidationRule (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct Fields * * ppflds ) = 0;
      virtual HRESULT __stdcall get_Indexes (
        /*[out,retval]*/ struct Indexes * * ppidxs ) = 0;
      virtual HRESULT __stdcall raw_OpenRecordset (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_RefreshLink ( ) = 0;
      virtual HRESULT __stdcall raw_CreateField (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Size,
        /*[out,retval]*/ struct _Field * * ppfld ) = 0;
      virtual HRESULT __stdcall raw_CreateIndex (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct _Index * * ppidx ) = 0;
      virtual HRESULT __stdcall raw_CreateProperty (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT DDL,
        /*[out,retval]*/ struct Property * * pprp ) = 0;
      virtual HRESULT __stdcall get_ConflictTable (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_ReplicaFilter (
        /*[out,retval]*/ VARIANT * pFilter ) = 0;
      virtual HRESULT __stdcall put_ReplicaFilter (
        /*[in]*/ VARIANT pFilter ) = 0;
};

struct __declspec(uuid("00000031-0000-0010-8000-00aa006d2ea4"))
Recordset : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GetValidationRule))
    _bstr_t ValidationRule;
    __declspec(property(get=GetCacheSize,put=PutCacheSize))
    long CacheSize;
    __declspec(property(get=GetPercentPosition,put=PutPercentPosition))
    float PercentPosition;
    __declspec(property(get=GetAbsolutePosition,put=PutAbsolutePosition))
    long AbsolutePosition;
    __declspec(property(get=GetEditMode))
    short EditMode;
    __declspec(property(get=GetODBCFetchCount))
    long ODBCFetchCount;
    __declspec(property(get=GetODBCFetchDelay))
    long ODBCFetchDelay;
    __declspec(property(get=GetParent))
    DatabasePtr Parent;
    __declspec(property(get=GetIndexes))
    IndexesPtr Indexes;
    __declspec(property(get=GetCollect,put=PutCollect))
    _variant_t Collect[];
    __declspec(property(get=GetBatchSize,put=PutBatchSize))
    long BatchSize;
    __declspec(property(get=GetBatchCollisionCount))
    long BatchCollisionCount;
    __declspec(property(get=GetBatchCollisions))
    _variant_t BatchCollisions;
    __declspec(property(get=GetConnection,put=PutRefConnection))
    ConnectionPtr Connection;
    __declspec(property(get=GetRecordStatus))
    short RecordStatus;
    __declspec(property(get=GetUpdateOptions,put=PutUpdateOptions))
    long UpdateOptions;
    __declspec(property(get=GethStmt))
    long hStmt;
    __declspec(property(get=GetStillExecuting))
    VARIANT_BOOL StillExecuting;
    __declspec(property(get=GetBOF))
    VARIANT_BOOL BOF;
    __declspec(property(get=GetBookmarkable))
    VARIANT_BOOL Bookmarkable;
    __declspec(property(get=GetDateCreated))
    _variant_t DateCreated;
    __declspec(property(get=GetDaoEof))
    VARIANT_BOOL DaoEof;
    __declspec(property(get=GetFilter,put=PutFilter))
    _bstr_t Filter;
    __declspec(property(get=GetIndex,put=PutIndex))
    _bstr_t Index;
    __declspec(property(get=GetLastModified))
    SAFEARRAY * LastModified;
    __declspec(property(get=GetLastUpdated))
    _variant_t LastUpdated;
    __declspec(property(get=GetLockEdits,put=PutLockEdits))
    VARIANT_BOOL LockEdits;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNoMatch))
    VARIANT_BOOL NoMatch;
    __declspec(property(get=GetSort,put=PutSort))
    _bstr_t Sort;
    __declspec(property(get=GetTransactions))
    VARIANT_BOOL Transactions;
    __declspec(property(get=GetType))
    short Type;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetUpdatable))
    VARIANT_BOOL Updatable;
    __declspec(property(get=GetRestartable))
    VARIANT_BOOL Restartable;
    __declspec(property(get=GetValidationText))
    _bstr_t ValidationText;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBOF ( );
    SAFEARRAY * GetBookmark ( );
    void PutBookmark (
        SAFEARRAY * * ppsach );
    VARIANT_BOOL GetBookmarkable ( );
    _variant_t GetDateCreated ( );
    VARIANT_BOOL GetDaoEof ( );
    _bstr_t GetFilter ( );
    void PutFilter (
        _bstr_t pbstr );
    _bstr_t GetIndex ( );
    void PutIndex (
        _bstr_t pbstr );
    SAFEARRAY * GetLastModified ( );
    _variant_t GetLastUpdated ( );
    VARIANT_BOOL GetLockEdits ( );
    void PutLockEdits (
        VARIANT_BOOL pb );
    _bstr_t GetName ( );
    VARIANT_BOOL GetNoMatch ( );
    _bstr_t GetSort ( );
    void PutSort (
        _bstr_t pbstr );
    VARIANT_BOOL GetTransactions ( );
    short GetType ( );
    long GetRecordCount ( );
    VARIANT_BOOL GetUpdatable ( );
    VARIANT_BOOL GetRestartable ( );
    _bstr_t GetValidationText ( );
    _bstr_t GetValidationRule ( );
    SAFEARRAY * GetCacheStart ( );
    void PutCacheStart (
        SAFEARRAY * * ppsa );
    long GetCacheSize ( );
    void PutCacheSize (
        long pl );
    float GetPercentPosition ( );
    void PutPercentPosition (
        float pd );
    long GetAbsolutePosition ( );
    void PutAbsolutePosition (
        long pl );
    short GetEditMode ( );
    long GetODBCFetchCount ( );
    long GetODBCFetchDelay ( );
    DatabasePtr GetParent ( );
    FieldsPtr GetFields ( );
    IndexesPtr GetIndexes ( );
    HRESULT _30_CancelUpdate ( );
    HRESULT AddNew ( );
    HRESULT Close ( );
    RecordsetPtr OpenRecordset (
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing );
    HRESULT Delete ( );
    HRESULT Edit ( );
    HRESULT FindFirst (
        _bstr_t Criteria );
    HRESULT FindLast (
        _bstr_t Criteria );
    HRESULT FindNext (
        _bstr_t Criteria );
    HRESULT FindPrevious (
        _bstr_t Criteria );
    HRESULT MoveFirst ( );
    HRESULT _30_MoveLast ( );
    HRESULT MoveNext ( );
    HRESULT MovePrevious ( );
    HRESULT Seek (
        _bstr_t Comparison,
        const _variant_t & Key1,
        const _variant_t & Key2 = vtMissing,
        const _variant_t & Key3 = vtMissing,
        const _variant_t & Key4 = vtMissing,
        const _variant_t & Key5 = vtMissing,
        const _variant_t & Key6 = vtMissing,
        const _variant_t & Key7 = vtMissing,
        const _variant_t & Key8 = vtMissing,
        const _variant_t & Key9 = vtMissing,
        const _variant_t & Key10 = vtMissing,
        const _variant_t & Key11 = vtMissing,
        const _variant_t & Key12 = vtMissing,
        const _variant_t & Key13 = vtMissing );
    HRESULT _30_Update ( );
    RecordsetPtr Clone ( );
    HRESULT Requery (
        const _variant_t & NewQueryDef = vtMissing );
    HRESULT Move (
        long Rows,
        const _variant_t & StartBookmark = vtMissing );
    HRESULT FillCache (
        const _variant_t & Rows = vtMissing,
        const _variant_t & StartBookmark = vtMissing );
    RecordsetPtr CreateDynaset (
        const _variant_t & Options = vtMissing,
        const _variant_t & Inconsistent = vtMissing );
    RecordsetPtr CreateSnapshot (
        const _variant_t & Options = vtMissing );
    _QueryDefPtr CopyQueryDef ( );
    RecordsetPtr ListFields ( );
    RecordsetPtr ListIndexes ( );
    _variant_t GetRows (
        const _variant_t & NumRows = vtMissing );
    _variant_t GetCollect (
        const _variant_t & Item );
    void PutCollect (
        const _variant_t & Item,
        const _variant_t & pvar );
    HRESULT Cancel ( );
    VARIANT_BOOL NextRecordset ( );
    long GethStmt ( );
    VARIANT_BOOL GetStillExecuting ( );
    long GetBatchSize ( );
    void PutBatchSize (
        long pl );
    long GetBatchCollisionCount ( );
    _variant_t GetBatchCollisions ( );
    ConnectionPtr GetConnection ( );
    void PutRefConnection (
        struct Connection * ppCn );
    short GetRecordStatus ( );
    long GetUpdateOptions ( );
    void PutUpdateOptions (
        long pl );
    HRESULT CancelUpdate (
        long UpdateType );
    HRESULT Update (
        long UpdateType,
        VARIANT_BOOL Force );
    HRESULT MoveLast (
        long Options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BOF (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Bookmark (
        /*[out,retval]*/ SAFEARRAY * * ppsach ) = 0;
      virtual HRESULT __stdcall put_Bookmark (
        /*[in]*/ SAFEARRAY * * ppsach ) = 0;
      virtual HRESULT __stdcall get_Bookmarkable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_DateCreated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_DaoEof (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_LastModified (
        /*[out,retval]*/ SAFEARRAY * * ppsa ) = 0;
      virtual HRESULT __stdcall get_LastUpdated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_LockEdits (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_LockEdits (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_NoMatch (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Sort (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Sort (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Transactions (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Updatable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Restartable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_ValidationText (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_ValidationRule (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_CacheStart (
        /*[out,retval]*/ SAFEARRAY * * ppsa ) = 0;
      virtual HRESULT __stdcall put_CacheStart (
        /*[in]*/ SAFEARRAY * * ppsa ) = 0;
      virtual HRESULT __stdcall get_CacheSize (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_CacheSize (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_PercentPosition (
        /*[out,retval]*/ float * pd ) = 0;
      virtual HRESULT __stdcall put_PercentPosition (
        /*[in]*/ float pd ) = 0;
      virtual HRESULT __stdcall get_AbsolutePosition (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_AbsolutePosition (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_EditMode (
        /*[out,retval]*/ short * pi ) = 0;
      virtual HRESULT __stdcall get_ODBCFetchCount (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_ODBCFetchDelay (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Database * * pdb ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct Fields * * ppflds ) = 0;
      virtual HRESULT __stdcall get_Indexes (
        /*[out,retval]*/ struct Indexes * * ppidxs ) = 0;
      virtual HRESULT __stdcall raw__30_CancelUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_AddNew ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_OpenRecordset (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall raw_FindFirst (
        /*[in]*/ BSTR Criteria ) = 0;
      virtual HRESULT __stdcall raw_FindLast (
        /*[in]*/ BSTR Criteria ) = 0;
      virtual HRESULT __stdcall raw_FindNext (
        /*[in]*/ BSTR Criteria ) = 0;
      virtual HRESULT __stdcall raw_FindPrevious (
        /*[in]*/ BSTR Criteria ) = 0;
      virtual HRESULT __stdcall raw_MoveFirst ( ) = 0;
      virtual HRESULT __stdcall raw__30_MoveLast ( ) = 0;
      virtual HRESULT __stdcall raw_MoveNext ( ) = 0;
      virtual HRESULT __stdcall raw_MovePrevious ( ) = 0;
      virtual HRESULT __stdcall raw_Seek (
        /*[in]*/ BSTR Comparison,
        /*[in]*/ VARIANT Key1,
        /*[in]*/ VARIANT Key2 = vtMissing,
        /*[in]*/ VARIANT Key3 = vtMissing,
        /*[in]*/ VARIANT Key4 = vtMissing,
        /*[in]*/ VARIANT Key5 = vtMissing,
        /*[in]*/ VARIANT Key6 = vtMissing,
        /*[in]*/ VARIANT Key7 = vtMissing,
        /*[in]*/ VARIANT Key8 = vtMissing,
        /*[in]*/ VARIANT Key9 = vtMissing,
        /*[in]*/ VARIANT Key10 = vtMissing,
        /*[in]*/ VARIANT Key11 = vtMissing,
        /*[in]*/ VARIANT Key12 = vtMissing,
        /*[in]*/ VARIANT Key13 = vtMissing ) = 0;
      virtual HRESULT __stdcall raw__30_Update ( ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_Requery (
        /*[in]*/ VARIANT NewQueryDef = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ long Rows,
        /*[in]*/ VARIANT StartBookmark = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_FillCache (
        /*[in]*/ VARIANT Rows = vtMissing,
        /*[in]*/ VARIANT StartBookmark = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CreateDynaset (
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT Inconsistent,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_CreateSnapshot (
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_CopyQueryDef (
        /*[out,retval]*/ struct _QueryDef * * ppqdf ) = 0;
      virtual HRESULT __stdcall raw_ListFields (
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_ListIndexes (
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_GetRows (
        /*[in]*/ VARIANT NumRows,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Collect (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_Collect (
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
      virtual HRESULT __stdcall raw_NextRecordset (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_hStmt (
        /*[out,retval]*/ long * phStmt ) = 0;
      virtual HRESULT __stdcall get_StillExecuting (
        /*[out,retval]*/ VARIANT_BOOL * pStillExec ) = 0;
      virtual HRESULT __stdcall get_BatchSize (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_BatchSize (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall get_BatchCollisionCount (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_BatchCollisions (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ struct Connection * * ppCn ) = 0;
      virtual HRESULT __stdcall putref_Connection (
        /*[in]*/ struct Connection * ppCn ) = 0;
      virtual HRESULT __stdcall get_RecordStatus (
        /*[out,retval]*/ short * pi ) = 0;
      virtual HRESULT __stdcall get_UpdateOptions (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall put_UpdateOptions (
        /*[in]*/ long pl ) = 0;
      virtual HRESULT __stdcall raw_CancelUpdate (
        /*[in]*/ long UpdateType ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ long UpdateType,
        /*[in]*/ VARIANT_BOOL Force ) = 0;
      virtual HRESULT __stdcall raw_MoveLast (
        /*[in]*/ long Options ) = 0;
};

struct __declspec(uuid("00000079-0000-0010-8000-00aa006d2ea4"))
_QueryDef : _DAO
{
    //
    // Property data
    //

    __declspec(property(get=GetDateCreated))
    _variant_t DateCreated;
    __declspec(property(get=GetLastUpdated))
    _variant_t LastUpdated;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetODBCTimeout,put=PutODBCTimeout))
    short ODBCTimeout;
    __declspec(property(get=GetStillExecuting))
    VARIANT_BOOL StillExecuting;
    __declspec(property(get=GetType))
    short Type;
    __declspec(property(get=GetSQL,put=PutSQL))
    _bstr_t SQL;
    __declspec(property(get=GetCacheSize,put=PutCacheSize))
    long CacheSize;
    __declspec(property(get=GetUpdatable))
    VARIANT_BOOL Updatable;
    __declspec(property(get=GetConnect,put=PutConnect))
    _bstr_t Connect;
    __declspec(property(get=GetPrepare,put=PutPrepare))
    _variant_t Prepare;
    __declspec(property(get=GetReturnsRecords,put=PutReturnsRecords))
    VARIANT_BOOL ReturnsRecords;
    __declspec(property(get=GetRecordsAffected))
    long RecordsAffected;
    __declspec(property(get=GetFields))
    FieldsPtr Fields;
    __declspec(property(get=GethStmt))
    long hStmt;
    __declspec(property(get=GetMaxRecords,put=PutMaxRecords))
    long MaxRecords;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDateCreated ( );
    _variant_t GetLastUpdated ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstr );
    short GetODBCTimeout ( );
    void PutODBCTimeout (
        short ps );
    short GetType ( );
    _bstr_t GetSQL ( );
    void PutSQL (
        _bstr_t pbstr );
    VARIANT_BOOL GetUpdatable ( );
    _bstr_t GetConnect ( );
    void PutConnect (
        _bstr_t pbstr );
    VARIANT_BOOL GetReturnsRecords ( );
    void PutReturnsRecords (
        VARIANT_BOOL pb );
    long GetRecordsAffected ( );
    FieldsPtr GetFields ( );
    ParametersPtr GetParameters ( );
    HRESULT Close ( );
    RecordsetPtr _30_OpenRecordset (
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing );
    RecordsetPtr _30__OpenRecordset (
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing );
    _QueryDefPtr _Copy ( );
    HRESULT Execute (
        const _variant_t & Options = vtMissing );
    HRESULT Compare (
        struct _QueryDef * pQdef,
        short * lps );
    RecordsetPtr CreateDynaset (
        const _variant_t & Options = vtMissing,
        const _variant_t & Inconsistent = vtMissing );
    RecordsetPtr CreateSnapshot (
        const _variant_t & Options = vtMissing );
    RecordsetPtr ListParameters ( );
    PropertyPtr CreateProperty (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & DDL = vtMissing );
    RecordsetPtr OpenRecordset (
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing,
        const _variant_t & LockEdit = vtMissing );
    RecordsetPtr _OpenRecordset (
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing,
        const _variant_t & LockEdit = vtMissing );
    HRESULT Cancel ( );
    long GethStmt ( );
    long GetMaxRecords ( );
    void PutMaxRecords (
        long pMxRecs );
    VARIANT_BOOL GetStillExecuting ( );
    long GetCacheSize ( );
    void PutCacheSize (
        long lCacheSize );
    _variant_t GetPrepare ( );
    void PutPrepare (
        const _variant_t & pb );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DateCreated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_LastUpdated (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_ODBCTimeout (
        /*[out,retval]*/ short * ps ) = 0;
      virtual HRESULT __stdcall put_ODBCTimeout (
        /*[in]*/ short ps ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ short * pi ) = 0;
      virtual HRESULT __stdcall get_SQL (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_SQL (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Updatable (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_ReturnsRecords (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall put_ReturnsRecords (
        /*[in]*/ VARIANT_BOOL pb ) = 0;
      virtual HRESULT __stdcall get_RecordsAffected (
        /*[out,retval]*/ long * pl ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct Fields * * ppflds ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct Parameters * * ppprms ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw__30_OpenRecordset (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw__30__OpenRecordset (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw__Copy (
        /*[out,retval]*/ struct _QueryDef * * ppqdf ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ VARIANT Options = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Compare (
        /*[in]*/ struct _QueryDef * pQdef,
        /*[in]*/ short * lps ) = 0;
      virtual HRESULT __stdcall raw_CreateDynaset (
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT Inconsistent,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_CreateSnapshot (
        /*[in]*/ VARIANT Options,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_ListParameters (
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_CreateProperty (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT DDL,
        /*[out,retval]*/ struct Property * * pprp ) = 0;
      virtual HRESULT __stdcall raw_OpenRecordset (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT LockEdit,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw__OpenRecordset (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT LockEdit,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
      virtual HRESULT __stdcall get_hStmt (
        /*[out,retval]*/ long * phStmt ) = 0;
      virtual HRESULT __stdcall get_MaxRecords (
        /*[out,retval]*/ long * pMxRecs ) = 0;
      virtual HRESULT __stdcall put_MaxRecords (
        /*[in]*/ long pMxRecs ) = 0;
      virtual HRESULT __stdcall get_StillExecuting (
        /*[out,retval]*/ VARIANT_BOOL * pStillExec ) = 0;
      virtual HRESULT __stdcall get_CacheSize (
        /*[out,retval]*/ long * lCacheSize ) = 0;
      virtual HRESULT __stdcall put_CacheSize (
        /*[in]*/ long lCacheSize ) = 0;
      virtual HRESULT __stdcall get_Prepare (
        /*[out,retval]*/ VARIANT * pb ) = 0;
      virtual HRESULT __stdcall put_Prepare (
        /*[in]*/ VARIANT pb ) = 0;
};

struct __declspec(uuid("00000033-0000-0010-8000-00aa006d2ea4"))
Recordsets : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    RecordsetPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    RecordsetPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
};

struct __declspec(uuid("00000041-0000-0010-8000-00aa006d2ea4"))
Connection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetConnect))
    _bstr_t Connect;
    __declspec(property(get=GetDatabase))
    DatabasePtr Database;
    __declspec(property(get=GethDbc))
    long hDbc;
    __declspec(property(get=GetQueryTimeout,put=PutQueryTimeout))
    short QueryTimeout;
    __declspec(property(get=GetQueryDefs))
    QueryDefsPtr QueryDefs;
    __declspec(property(get=GetTransactions))
    VARIANT_BOOL Transactions;
    __declspec(property(get=GetRecordsAffected))
    long RecordsAffected;
    __declspec(property(get=GetStillExecuting))
    VARIANT_BOOL StillExecuting;
    __declspec(property(get=GetUpdatable))
    VARIANT_BOOL Updatable;
    __declspec(property(get=GetRecordsets))
    RecordsetsPtr Recordsets;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetConnect ( );
    DatabasePtr GetDatabase ( );
    long GethDbc ( );
    short GetQueryTimeout ( );
    void PutQueryTimeout (
        short pSeconds );
    VARIANT_BOOL GetTransactions ( );
    long GetRecordsAffected ( );
    VARIANT_BOOL GetStillExecuting ( );
    VARIANT_BOOL GetUpdatable ( );
    QueryDefsPtr GetQueryDefs ( );
    RecordsetsPtr GetRecordsets ( );
    HRESULT Cancel ( );
    HRESULT Close ( );
    _QueryDefPtr CreateQueryDef (
        const _variant_t & Name = vtMissing,
        const _variant_t & SQLText = vtMissing );
    HRESULT Execute (
        _bstr_t Query,
        const _variant_t & Options = vtMissing );
    RecordsetPtr OpenRecordset (
        _bstr_t Name,
        const _variant_t & Type = vtMissing,
        const _variant_t & Options = vtMissing,
        const _variant_t & LockEdit = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Database (
        /*[out,retval]*/ struct Database * * ppDb ) = 0;
      virtual HRESULT __stdcall get_hDbc (
        /*[out,retval]*/ long * phDbc ) = 0;
      virtual HRESULT __stdcall get_QueryTimeout (
        /*[out,retval]*/ short * pSeconds ) = 0;
      virtual HRESULT __stdcall put_QueryTimeout (
        /*[in]*/ short pSeconds ) = 0;
      virtual HRESULT __stdcall get_Transactions (
        /*[out,retval]*/ VARIANT_BOOL * pb ) = 0;
      virtual HRESULT __stdcall get_RecordsAffected (
        /*[out,retval]*/ long * pRecords ) = 0;
      virtual HRESULT __stdcall get_StillExecuting (
        /*[out,retval]*/ VARIANT_BOOL * pStillExec ) = 0;
      virtual HRESULT __stdcall get_Updatable (
        /*[out,retval]*/ VARIANT_BOOL * pStillExec ) = 0;
      virtual HRESULT __stdcall get_QueryDefs (
        /*[out,retval]*/ struct QueryDefs * * ppqdfs ) = 0;
      virtual HRESULT __stdcall get_Recordsets (
        /*[out,retval]*/ struct Recordsets * * pprsts ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_CreateQueryDef (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT SQLText,
        /*[out,retval]*/ struct _QueryDef * * ppqdf ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ BSTR Query,
        /*[in]*/ VARIANT Options = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_OpenRecordset (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT LockEdit,
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
};

struct __declspec(uuid("00000043-0000-0010-8000-00aa006d2ea4"))
Connections : _Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ConnectionPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    ConnectionPtr GetItem (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Item,
        /*[out,retval]*/ struct Connection * * ppconn ) = 0;
};

struct __declspec(uuid("00000035-0000-0010-8000-00aa006d2ea4"))
Recordset2 : Recordset
{
    //
    // Property data
    //

    __declspec(property(get=GetParentRecordset))
    RecordsetPtr ParentRecordset;

    //
    // Wrapper methods for error-handling
    //

    RecordsetPtr GetParentRecordset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentRecordset (
        /*[out,retval]*/ struct Recordset * * pprst ) = 0;
};

//
// Wrapper method implementations
//

#include "d:\sources\codegenii\debug\library\acedao.tli"

} // namespace DAO

#pragma pack(pop)
